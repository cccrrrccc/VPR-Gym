/*------------------------------------------------------------------------------
 * This code was generated by Spiral Multiplier Block Generator, www.spiral.net
 * Copyright (c) 2006, Carnegie Mellon University
 * All rights reserved.
 * The code is distributed under a BSD style license
 * (see http://www.opensource.org/licenses/bsd-license.php)
 *------------------------------------------------------------------------------ */
/* ./multBlockGen.pl 12517 -fractionalBits 0*/
module multiplier_block (
    i_data0,
    o_data0
);

  // Port mode declarations:
  input   [31:0] i_data0;
  output  [31:0]
    o_data0;

  //Multipliers:

  wire [31:0]
    w1,
    w8192,
    w8193,
    w4,
    w8197,
    w256,
    w8453,
    w128,
    w127,
    w4064,
    w12517;

  assign w1 = i_data0;
  assign w12517 = w8453 + w4064;
  assign w127 = w128 - w1;
  assign w128 = w1 << 7;
  assign w256 = w1 << 8;
  assign w4 = w1 << 2;
  assign w4064 = w127 << 5;
  assign w8192 = w1 << 13;
  assign w8193 = w1 + w8192;
  assign w8197 = w8193 + w4;
  assign w8453 = w8197 + w256;

  assign o_data0 = w12517;

  //multiplier_block area estimate = 8316.00013350735;
endmodule //multiplier_block

module surround_with_regs(
	i_data0,
	o_data0,
	clk
);

	// Port mode declarations:
	input   [31:0] i_data0;
	output  [31:0] o_data0;
	reg  [31:0] o_data0;
	input clk;

	reg [31:0] i_data0_reg;
	wire [30:0] o_data0_from_mult;

	always @(posedge clk) begin
		i_data0_reg <= i_data0;
		o_data0 <= o_data0_from_mult;
	end

	multiplier_block mult_blk(
		.i_data0(i_data0_reg),
		.o_data0(o_data0_from_mult)
	);

endmodule
